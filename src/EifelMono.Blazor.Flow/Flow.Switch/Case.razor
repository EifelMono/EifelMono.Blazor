@using System.Linq.Expressions
@namespace EifelMono.Blazor.Flow
@typeparam T

<If Value="@(IsParentOk && IsValueOk)">
    <Then>
        <If Value="@Parent.IsCondition(Value)">
            @ChildContent
        </If>
    </Then>
    <Else>
        <IfNot Value="@IsParentOk">
            <FlowShowError>@ParentErrorMessage</FlowShowError>
        </IfNot>
        <IfNot Value="@IsValueOk">
            <FlowShowError>@ValueErrorMessage</FlowShowError>
        </IfNot>
    </Else>
</If>

@code {
    [CascadingParameter]
    private Switch<T> Parent { get; set; }

    private bool IsParentOk => Parent is Switch<T>;
    protected string ParentErrorMessage => $"{this.GetType().Name} must exist within {nameof(Switch<T>)}";

    private bool IsValueOk => object.Equals(Value?.GetType(), Parent?.Value?.GetType());
    protected string ValueErrorMessage => $"Type Case.Value {Value?.GetType().Name} must be equal type Switch.value {Parent?.Value?.GetType().Name}";
    [Parameter]
    public T Value { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    protected override void OnInitialized()
    {
        if (!IsParentOk && FlowGlobals.ThrowFlowErrors)
            throw new ArgumentException(nameof(Parent), ParentErrorMessage);
        if (!IsValueOk && FlowGlobals.ThrowFlowErrors)
            throw new ArgumentException(nameof(Parent), ValueErrorMessage);
        base.OnInitialized();
    }
}
