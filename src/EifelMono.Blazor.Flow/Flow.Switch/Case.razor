@using System.Linq.Expressions
@namespace EifelMono.Blazor.Flow
@typeparam T

<If Value="@(IsParentOk && IsValueOk)">
    <Then>
        <If Value="@ParentSwitch.IsCondition(Value)">
            @ChildContent
        </If>
    </Then>
    <Else>
        <IfNot Value="@IsParentOk">
            <Then>
                <FlowShowError>@ParentErrorMessage</FlowShowError>
            </Then>
            <Else>
                <IfNot Value="@IsValueOk">
                    <FlowShowError>@ValueErrorMessage</FlowShowError>
                </IfNot>
            </Else>
        </IfNot>
    </Else>
</If>

@code {
    [CascadingParameter]
    private ISwitch ParentISwitch { get; set; }
    [CascadingParameter]
    private Switch<T> ParentSwitch { get; set; }

    private bool IsParentOk => ParentISwitch is ISwitch;
    protected string ParentErrorMessage => $"{this.GetType().Name} must exist within {nameof(Switch<T>)}";

    private bool IsValueOk => ParentSwitch is Switch<T>;
    protected string ValueErrorMessage => $"Type of Case.Value {Value?.GetType().Name} must be equal type of Switch.Value {SwitchValueTypeName}";
    [Parameter]
    public T Value { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private string SwitchValueTypeName { get; set; } = "";

    protected override void OnInitialized()
    {
        var generics = ParentISwitch?.GetType()?.GetGenericArguments() ?? new Type[] { };
        if ((generics?.Length ?? 0) == 1)
            SwitchValueTypeName = generics[0].Name;
        base.OnInitialized();
    }
}
