@implements IDisposable
@using System.Threading

@ChildContent

@code {
    [Parameter]
    public TimeSpan Intervall { get; set; } = TimeSpan.FromSeconds(1);
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private CancellationTokenSource CancellationTokenSource = null;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            IntervallLoop();
        return base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        try
        {
            if (CancellationTokenSource is { })
            {
                CancellationTokenSource.Cancel();
                CancellationTokenSource = null;
            }
        }
        catch { }
    }

    private async void IntervallLoop()
    {
        if (CancellationTokenSource is { })
            return;
        CancellationTokenSource = new CancellationTokenSource();
        try
        {
            while (!CancellationTokenSource.IsCancellationRequested)
            {
                this.StateHasChanged();
                await Task.Delay(Intervall, CancellationTokenSource.Token);
            }
        }
        catch { }
        finally
        {
            CancellationTokenSource = null;
        }
    }
}
