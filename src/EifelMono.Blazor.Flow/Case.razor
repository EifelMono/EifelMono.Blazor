<IfThenElse Value="IsParentOk && IsValueOk">
    <IfThen>
        <If Value="Parent.IsEquals(Value)">
            @ChildContent
        </If>
    </IfThen>
    <IfElse>
        <IfNot Value="IsParentOk">
            <FlowError>@ParentErrorMessage</FlowError>
        </IfNot>
        <IfNot Value="IsValueOk">
            <FlowError>@ValueErrorMessage</FlowError>
        </IfNot>
    </IfElse>
</IfThenElse>

@code {
    [CascadingParameter]
    private Switch Parent { get; set; }

    private bool IsParentOk => Parent is Switch;
    protected string ParentErrorMessage => $"{this.GetType().Name} must exist within {nameof(Switch)}";

    private bool IsValueOk => object.Equals(Value?.GetType(), Parent?.Value?.GetType());
    protected string ValueErrorMessage => $"Type Case.Value {Value?.GetType().Name} must be equal type Switch.value {Parent?.Value?.GetType().Name}";
    [Parameter]
    public object Value { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    protected override void OnInitialized()
    {
        if (!IsParentOk && FlowError.s_throwOnException)
            throw new ArgumentException(nameof(Parent), ParentErrorMessage);
        if (!IsValueOk && FlowError.s_throwOnException)
            throw new ArgumentException(nameof(Parent), ValueErrorMessage);
        base.OnInitialized();
    }
}
